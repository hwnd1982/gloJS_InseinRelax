const{unlinkSync,writeFileSync}=require("fs"),Axios=require("axios"),{describe,it,expect,beforeAll,beforeEach,afterAll}=require("@jest/globals");process.env.DB_FILE=require("path").resolve(process.cwd(),"test-db.json"),process.env.PORT=3e3,process.env.NODE_ENV="test";const axios=Axios.create({baseURL:`http://localhost:${process.env.PORT}/api/clients/`,validateStatus:t=>t<500,headers:{"Content-Type":"application/json",Accept:"application/json"}});let appServer;beforeAll((async()=>(appServer=require("./index"),new Promise((t=>{appServer.on("listening",(()=>t()))}))))),afterAll((()=>(unlinkSync(process.env.DB_FILE),new Promise((t=>{appServer.close((()=>t()))}))))),beforeEach((()=>{writeFileSync(process.env.DB_FILE,"[]",{encoding:"utf8"})}));const client={name:"Name",surname:"Surname",lastName:"Last name",contacts:[{type:"Phone",value:"+71234567890"}]},searchValue="abcdefGHijKLmnOPqrstuvwxyz",searchQuery="ghIJklmnopqr";function autoData(t){return["id","createdAt","updatedAt"].reduce(((e,a)=>({...e,[a]:t[a]})),{})}function waitASecond(){return new Promise((t=>{setTimeout(t,1e3)}))}describe("Clients API",(()=>{async function t(t,e,a){const s=[axios.post("",client),axios.post("",{...client,[t]:e}),axios.post("",client)];await Promise.all(s);const i=await axios.get(`?search=${a}`);expect(i.status).toBe(200),expect(i.data.length).toBe(1),expect(i.data[0][t]).toEqual(e)}it("POST /api/clients should create new user with 201 status",(async()=>{const t=await axios.post("",client);expect(t.status).toBe(201),expect(t.data).toEqual({...client,...autoData(t.data)}),expect(t.headers.location).toEqual(`/api/clients/${t.data.id}`)})),it("POST /api/clients should return error descriptions with 422 status on validation error",(async()=>{const t=await axios.post("",{name:"Srsly? Only name?"});expect(t.status).toBe(422),expect(Array.isArray(t.data.errors)).toBe(!0),expect(t.data.errors.length).toBeGreaterThan(0);for(const e of t.data.errors)expect("string"==typeof e.field).toBe(!0),expect("string"==typeof e.message).toBe(!0)})),it("GET /api/clients should return a list of clients with 200 status",(async()=>{const t=[axios.post("",client),axios.post("",client),axios.post("",client)];await Promise.all(t);const e=await axios.get("");expect(e.status).toBe(200),expect(Array.isArray(e.data)).toBe(!0),expect(e.data.length).toBe(t.length)}));for(const e of["name","surname","lastName"])it(`GET /api/clients should search by ${e} substring`,(()=>t(e,searchValue,searchQuery)));it("GET /api/clients should search by any contact value substring",(()=>t("contacts",[{type:"Whatever",value:"123"},{type:"Alphabet",value:searchValue}],searchQuery))),it("GET /api/clients/{id} should return a client object with 200 status",(async()=>{const{data:{id:t}}=await axios.post("",client),e=await axios.get(t);expect(e.status).toBe(200),expect(e.data).toEqual({...client,...autoData(e.data)})})),it("GET /api/clients/{id} should fail with 404 status for inexistent client ID",(async()=>{const t=await axios.get("i don't know this guy");expect(t.status).toBe(404)})),it("PATCH /api/clients/{id} should partially update a client with 200 status",(async()=>{const{data:t}=await axios.post("",client),e="New name",a="New surname",s=[{type:"New contact",value:"Something"}];await waitASecond();const i=await axios.patch(t.id,{name:e,surname:a});expect(i.status).toBe(200),expect(i.data).toEqual({...client,...autoData(i.data),name:e,surname:a}),expect(i.data.createdAt===t.createdAt).toBe(!0),expect(i.data.updatedAt>t.updatedAt).toBe(!0),await waitASecond();const o=await axios.patch(t.id,{contacts:s});expect(o.status).toBe(200),expect(o.data).toEqual({...client,...autoData(o.data),name:e,surname:a,contacts:s}),expect(o.data.createdAt===t.createdAt).toBe(!0),expect(o.data.updatedAt>i.data.updatedAt).toBe(!0)})),it("PATCH /api/clients/{id} should return error descriptions with 422 status on validation error",(async()=>{const{data:{id:t}}=await axios.post("",client),e=await axios.patch(t,{name:void 0,surname:null});expect(e.status).toBe(422),expect(Array.isArray(e.data.errors)).toBe(!0),expect(e.data.errors.length).toBeGreaterThan(0);for(const t of e.data.errors)expect("string"==typeof t.field).toBe(!0),expect("string"==typeof t.message).toBe(!0)})),it("PATCH /api/clients/{id} should fail with 404 status for inexistent client ID",(async()=>{const t=await axios.patch("i don't know this guy",{name:"John"});expect(t.status).toBe(404)})),it("DELETE /api/clients/{id} should delete a client with 200 status",(async()=>{const{data:{id:t}}=await axios.post("",client),e=await axios.delete(t);expect(e.status).toBe(200);const{status:a}=await axios.get(t);expect(a).toBe(404)}))}));